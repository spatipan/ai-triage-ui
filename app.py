# app.py ‚Äî ED Front‚ÄëDoor Triage Assistant (Responsive + Bilingual)
# ---------------------------------------------------
# For triage teams at the hospital entrance (EMS crews, triage nurses, ED doctors)
# - Responsive layout (stacks gracefully on small screens)
# - Language toggle (‡πÑ‡∏ó‡∏¢ / English)
# - Outcome probability + 5‚Äëlevel recommendation with cutoffs
# - Zone color mapping (per request):
#     L1 Resuscitation ‚Üí Blue, L2 Emergent ‚Üí Red, L3 Urgent ‚Üí Yellow,
#     L4 Less‚Äëurgent ‚Üí Green, L5 Non‚Äëurgent ‚Üí White
# - Evidence & team credits shown in the footer
# - Stylish UI with badges, soft cards, and subtle animations
#
# Disclaimer: Decision support only. Follow local protocols and clinical judgment.

from __future__ import annotations
import os
import time
import uuid
from datetime import datetime

import numpy as np
import pandas as pd
import streamlit as st
import pickle
import joblib

# Heavy deps (available in your env)
import tensorflow as tf  # noqa: F401
import tensorflow_hub as hub
import tensorflow_text  # IMPORTANT: registers custom ops like SentencepieceOp before loading TF-Hub models

# ---------------------------
# Page setup
# ---------------------------
st.set_page_config(
    page_title="ED Triage Assistant",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Global CSS (responsive, modern look)
st.markdown(
    """
    <style>
      :root {
        --card-bg: rgba(255,255,255,0.65);
        --border: 1px solid rgba(2,6,23,0.08);
        --shadow: 0 8px 24px rgba(2,6,23,0.08);
      }
      .hero {padding: 1.0rem 1.25rem; border-radius: 16px; border:var(--border);
             background: linear-gradient(135deg,#eef2ff 0%, #ffffff 100%);} 
      .badge {display:inline-block; padding: .35rem .7rem; border-radius: 9999px; font-weight: 700; border:var(--border);}
      /* Level colors per request */
      .lvl1 {background:#dbeafe; color:#1e40af; border-color:#93c5fd;}  /* Blue */
      .lvl2 {background:#fee2e2; color:#b91c1c; border-color:#fecaca;}  /* Red */
      .lvl3 {background:#fef9c3; color:#854d0e; border-color:#fde68a;}  /* Yellow */
      .lvl4 {background:#dcfce7; color:#166534; border-color:#bbf7d0;}  /* Green */
      .lvl5 {background:#ffffff; color:#334155; border-color:#e2e8f0;}  /* White */

      .metric-card { background: var(--card-bg); border:var(--border); padding: 1rem; border-radius: 16px; box-shadow: var(--shadow); }
      .action-card { background: var(--card-bg); border:var(--border); padding: 1rem; border-radius: 16px; box-shadow: var(--shadow); }

      .stButton > button { width: 100%; border-radius: 12px; padding: .6rem 1rem; font-weight: 700; }

      @media (max-width: 1000px) {
        .hero { padding: .8rem 1rem; }
        .st-emotion-cache-ue6h4q { padding-left: 0 !important; padding-right: 0 !important; }
      }
      @media (max-width: 700px) {
        .stButton > button { padding: .8rem 1.1rem; font-size: 1.05rem; }
      }

      .fadein { animation: fade 0.5s ease-in-out; }
      @keyframes fade { from {opacity:0; transform: translateY(6px);} to {opacity:1; transform:none;} }

      footer {visibility: hidden}
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------------------------
# Constants
# ---------------------------
APP_VERSION = "3.2.0"

MODEL_PATH = "model/xgb_model_calibrated.pkl"
EMBEDDER_URL = "https://tfhub.dev/google/universal-sentence-encoder-multilingual-large/3"
EXPLAINER_PATH = "model/xgb_explainer.pkl"  # optional

NUM_COLS = ['age','sbp','dbp','temp','pr','rr','o2sat','gcs_e','gcs_v','gcs_m','sex','how_come_er','t_n']
TEXT_COLS = [f'text_{i}' for i in range(512)]  # we generate 512-dim USE then your pipeline may PCA

# i18n strings
LANGS = {
  'en': {
    'title': 'ED Triage Assistant',
    'hero': 'Use at the ED entrance to estimate risk and assign the right zone before moving the patient inside. Adjust cutoffs in the sidebar to match your protocol.',
    'patient_details': 'Patient details',
    'age':'Age','gender':'Gender','arrival':'Arrival mode','case_type':'Case type','male':'M','female':'F',
    'walkin':'Walk-in','ems':'EMS','referral':'Referral','trauma':'Trauma','nontrauma':'Non-trauma',
    'sbp':'Systolic BP','dbp':'Diastolic BP','temp':'Temperature (¬∞C)','pr':'Pulse rate','rr':'Respiratory rate','o2':'Oxygen saturation (%)',
    'gcs_e':'GCS: Eye','gcs_v':'GCS: Verbal','gcs_m':'GCS: Motor','cc':'Chief complaint',
    'predict':'‚ö° Get recommendation',
    'recommendation':'Recommendation & probability',
    'triage':'Triage level','zone':'Suggested zone','actions':'Suggested actions now','why':'Why',
    'outcomes':'Outcome probability','download':'Download result (CSV)',
    'cutoffs':'Triage cutoffs','cut_l1':'Level 1: Critical risk ‚â•','cut_l2':'Level 2: Critical risk ‚â•','cut_l3':'Level 3: Urgent resource risk ‚â•','cut_l4':'Level 4: Minor resource risk ‚â•',
    'redflags_toggle':'Apply vital‚Äësign red‚Äëflags (auto Level 1)','redflags':'Red‚Äëflag thresholds','save_log':'Save prediction to CSV log',
    'advanced':'Advanced (paths)','footer_note':'Decision support only. Follow local protocols and clinical judgment.',
    'footer_evidence':'Evidence: internal validation (2018‚Äì2022) with bootstrapping, calibration, and strong AUROC; see preprint:',
    'footer_team':'Team: Patipan Sitthiprawiat, Borwon Wittayachamnankul, Wachiranun Sirikul, Korsin Laohavisudhi ‚Äî Chiang Mai University Faculty of Medicine (Emergency Medicine & Informatics)',
    'placeholder_cc':'e.g., Sudden chest pain 2 hours, dyspnea',
    'tabs': ['Tutorial','Evidence','About','Contact & Feedback'],
    'icu':'ICU admission',
  },
  'th': {
    'title': '‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô (‡∏´‡∏ô‡πâ‡∏≤ ER)',
    'hero': '‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô',
    'patient_details': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢',
    'age':'‡∏≠‡∏≤‡∏¢‡∏∏','gender':'‡πÄ‡∏û‡∏®','arrival':'‡∏ß‡∏¥‡∏ò‡∏µ‡∏°‡∏≤ ER','case_type':'‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏Ñ‡∏™','male':'‡∏ä','female':'‡∏ç',
    'walkin':'‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á','ems':'EMS','referral':'‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠','trauma':'‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏','nontrauma':'‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏',
    'sbp':'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏ã‡∏¥‡∏™‡πÇ‡∏ï‡∏•‡∏¥‡∏Å','dbp':'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÑ‡∏î‡πÅ‡∏≠‡∏™‡πÇ‡∏ï‡∏•‡∏¥‡∏Å','temp':'‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)','pr':'‡∏ä‡∏µ‡∏û‡∏à‡∏£','rr':'‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à','o2':'‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß (%)',
    'gcs_e':'GCS: ‡∏ï‡∏≤','gcs_v':'GCS: ‡∏û‡∏π‡∏î','gcs_m':'GCS: ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß','cc':'‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
    'predict':'‚ö° ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
    'recommendation':'‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô',
    'triage':'‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å','zone':'‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥','actions':'‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ','why':'‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•',
    'outcomes':'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå','download':'‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (CSV)',
    'cutoffs':'‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å','cut_l1':'‡∏£‡∏∞‡∏î‡∏±‡∏ö 1: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ß‡∏¥‡∏Å‡∏§‡∏ï ‚â•','cut_l2':'‡∏£‡∏∞‡∏î‡∏±‡∏ö 2: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ß‡∏¥‡∏Å‡∏§‡∏ï ‚â•','cut_l3':'‡∏£‡∏∞‡∏î‡∏±‡∏ö 3: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô ‚â•','cut_l4':'‡∏£‡∏∞‡∏î‡∏±‡∏ö 4: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‚â•',
    'redflags_toggle':'‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏µ‡∏û (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1 ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)','redflags':'‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏µ‡∏û','save_log':'‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏á CSV',
    'advanced':'‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå)','footer_note':'‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à ‡πÑ‡∏°‡πà‡∏ó‡∏î‡πÅ‡∏ó‡∏ô‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏ç‡∏≤‡∏ì‡∏ó‡∏≤‡∏á‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô',
    'footer_evidence':'‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° bootstrap ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡∏Ñ‡πà‡∏≤ AUROC ‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏î‡∏π preprint:',
    'footer_team':'‡∏ó‡∏µ‡∏°: ‡∏ô‡∏û.‡∏õ‡∏è‡∏¥‡∏†‡∏≤‡∏ì ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÄ‡∏ß‡∏®, ‡∏£‡∏®.‡∏ô‡∏û.‡∏ö‡∏£‡∏ß‡∏ô ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ä‡∏≥‡∏ô‡∏∞‡∏Å‡∏∏‡∏•, ‡∏ú‡∏®.‡∏î‡∏£.‡∏ß‡∏ä‡∏¥‡∏£‡∏ô‡∏±‡∏ô‡∏ó‡πå ‡∏®‡∏¥‡∏£‡∏¥‡∏Å‡∏∏‡∏•, ‡∏£‡∏®.‡∏ô‡∏û.‡∏Å‡∏£‡∏®‡∏¥‡∏ì ‡∏•‡πâ‡∏≠‡∏ß‡∏¥‡∏®‡∏©‡∏é‡πå ‚Äî ‡∏Ñ‡∏ì‡∏∞‡πÅ‡∏û‡∏ó‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏°‡∏ä. (‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô & ‡∏≠‡∏¥‡∏ô‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏¥‡∏Å‡∏™‡πå)',
    'placeholder_cc':'‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏û‡∏•‡∏±‡∏ô 2 ‡∏ä‡∏°. ‡∏´‡∏≠‡∏ö‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢',
    'tabs': ['‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô','‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á','‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤','‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞'],
    'icu':'‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏Å‡∏§‡∏ï',
  }
}

LEVEL_MAP = {
    1: ( { 'en': "Resuscitation", 'th': '‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û' },  "lvl1"),  # Blue
    2: ( { 'en': "Emergent",       'th': '‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô' },  "lvl2"),  # Red
    3: ( { 'en': "Urgent",         'th': '‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô' },        "lvl3"),  # Yellow
    4: ( { 'en': "Less‚Äëurgent",    'th': '‡∏Å‡∏∂‡πà‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô' },    "lvl4"),  # Green
    5: ( { 'en': "Non‚Äëurgent",     'th': '‡πÑ‡∏°‡πà‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô' },     "lvl5"),  # White
}

ZONE_MAP = {
    1: ( { 'en': "Blue zone",  'th': '‡πÇ‡∏ã‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô' }, { 'en': "Resuscitation bay", 'th': '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û' } ),
    2: ( { 'en': "Red zone",   'th': '‡πÇ‡∏ã‡∏ô‡πÅ‡∏î‡∏á' },    { 'en': "High‚Äëacuity / monitored", 'th': '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å' } ),
    3: ( { 'en': "Yellow zone",'th': '‡πÇ‡∏ã‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á' }, { 'en': "Urgent care", 'th': '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô' } ),
    4: ( { 'en': "Green zone", 'th': '‡πÇ‡∏ã‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß' },  { 'en': "Minor care", 'th': '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' } ),
    5: ( { 'en': "White zone", 'th': '‡πÇ‡∏ã‡∏ô‡∏Ç‡∏≤‡∏ß' },   { 'en': "Fast‚Äëtrack / clinic", 'th': '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô/‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å' } ),
}

# ---------------------------
# Loaders (cached)
# ---------------------------
@st.cache_resource(show_spinner=False)
def load_model(model_path: str):
    with open(model_path, 'rb') as f:
        return pickle.load(f)

@st.cache_resource(show_spinner=False)
def load_embedder(url: str):
    try:
        # tensorflow_text import above ensures custom ops are registered
        return hub.load(url)
    except Exception as e:
        st.error("Failed to load text embedder. Ensure TensorFlow Text matches your TF version (e.g., tensorflow==2.12.* with tensorflow-text==2.12.*)." 
                 f"Details: {type(e).__name__}: {e}")
        raise

@st.cache_resource(show_spinner=False)
def load_explainer(path: str):
    if not os.path.exists(path):
        return None
    with open(path, 'rb') as f:
        return pickle.load(f)

# Load artifacts once
MODEL = load_model(MODEL_PATH)
EMBEDDER = load_embedder(EMBEDDER_URL)
EXPLAINER = load_explainer(EXPLAINER_PATH)

# Try to detect PCA n_components from pipeline (optional)
try:
    _n_comp = MODEL.get_params().get('preprocessing__col__text__pca__n_components', None)
except Exception:
    _n_comp = None

# ---------------------------
# Sidebar ‚Äî language, cutoffs, red‚Äëflags
# ---------------------------
st.sidebar.title("üåê Language / ‡∏†‡∏≤‡∏©‡∏≤")
lang_choice = st.sidebar.selectbox("Language", options=["English","‡πÑ‡∏ó‡∏¢"], index=0)
LANG_KEY = 'th' if lang_choice == '‡πÑ‡∏ó‡∏¢' else 'en'
T = LANGS[LANG_KEY]

with st.sidebar:
    st.markdown(f"**{T['cutoffs']}**")
    lvl1_cut = st.slider(T['cut_l1'], 0.10, 0.90, 0.50, 0.01,
                         help=("If predicted ICU risk ‚â• this ‚áí Level 1" if LANG_KEY=='en' else "‡∏´‡∏≤‡∏Å‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Ç‡πâ‡∏≤ ICU ‚â• ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ ‚áí ‡∏£‡∏∞‡∏î‡∏±‡∏ö 1"))
    lvl2_cut = st.slider(T['cut_l2'], 0.05, 0.80, 0.30, 0.01)
    lvl3_cut = st.slider(T['cut_l3'], 0.05, 0.80, 0.40, 0.01)
    lvl4_cut = st.slider(T['cut_l4'], 0.05, 0.80, 0.25, 0.01)

    st.markdown("---")
    apply_redflags = st.toggle(T['redflags_toggle'], value=True)
    with st.expander(T['redflags'], expanded=False):
        rf_sbp = st.number_input("SBP < (mmHg)", value=90, min_value=60, max_value=120)
        rf_o2 = st.number_input("SpO‚ÇÇ < (%)", value=90, min_value=70, max_value=100)
        rf_rr_hi = st.number_input("RR > (/min)", value=30, min_value=16, max_value=60)
        rf_temp_hi = st.number_input("Temp ‚â• (¬∞C)", value=39.5, min_value=37.0, max_value=42.0, step=0.1, format="%.1f")
        rf_gcs = st.number_input("GCS total ‚â§", value=8, min_value=3, max_value=15)

    st.markdown("---")
    log_predictions = st.toggle(T['save_log'], value=False)

    with st.expander(T['advanced']):
        st.caption("Paths are fixed in this build ‚Äî change constants at top if needed.")

# ---------------------------
# Helpers
# ---------------------------

def embed_text(text: str) -> np.ndarray:
    # Returns 512-dim USE vector
    return np.array(EMBEDDER([str(text)])).reshape(1, -1)


def vital_red_flags(v: dict) -> list[str]:
    flags = []
    if v.get('sbp', 999) < rf_sbp: flags.append(f"SBP < {rf_sbp}")
    if v.get('o2sat', 100) < rf_o2: flags.append(f"SpO‚ÇÇ < {rf_o2}%")
    if v.get('rr', 0) > rf_rr_hi: flags.append(f"RR > {rf_rr_hi}")
    if v.get('temp', 0) >= rf_temp_hi: flags.append(f"Temp ‚â• {rf_temp_hi}¬∞C")
    gcs_total = v.get('gcs_e', 4) + v.get('gcs_v', 5) + v.get('gcs_m', 6)
    if gcs_total <= rf_gcs: flags.append(f"GCS ‚â§ {rf_gcs}")
    return flags


def triage_decision(icu_prob: float, vitals: dict) -> tuple[int, str, list[str]]:
    rationale = []

    if apply_redflags:
        flags = vital_red_flags(vitals)
        if flags:
            rationale.append(("Vital red‚Äëflags: " if LANG_KEY=='en' else "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏µ‡∏û: ") + ", ".join(flags))
            return 1, LEVEL_MAP[1][1], rationale

    # Use ICU risk as proxy for criticality; you can extend to multiple outcomes later
    if icu_prob >= lvl1_cut:
        rationale.append(("ICU risk " if LANG_KEY=='en' else "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ ICU ") + f"{icu_prob*100:.1f}% ‚â• L1 {lvl1_cut*100:.0f}%")
        return 1, LEVEL_MAP[1][1], rationale
    if icu_prob >= lvl2_cut:
        rationale.append(("ICU risk " if LANG_KEY=='en' else "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ ICU ") + f"{icu_prob*100:.1f}% ‚â• L2 {lvl2_cut*100:.0f}%")
        return 2, LEVEL_MAP[2][1], rationale

    # If not critical, step down using placeholder resource risk ‚Äî here we reuse ICU prob for the demo
    if icu_prob >= lvl3_cut:
        rationale.append(("Urgent resource risk " if LANG_KEY=='en' else "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô ") + f"{icu_prob*100:.1f}% ‚â• L3 {lvl3_cut*100:.0f}%")
        return 3, LEVEL_MAP[3][1], rationale
    if icu_prob >= lvl4_cut:
        rationale.append(("Minor resource risk " if LANG_KEY=='en' else "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ") + f"{icu_prob*100:.1f}% ‚â• L4 {lvl4_cut*100:.0f}%")
        return 4, LEVEL_MAP[4][1], rationale

    rationale.append("All risks below cutoffs" if LANG_KEY=='en' else "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à")
    return 5, LEVEL_MAP[5][1], rationale


def zone_for_level(level: int) -> tuple[str, str]:
    name_i18n, area_i18n = ZONE_MAP[level]
    return name_i18n[LANG_KEY], area_i18n[LANG_KEY]


def actions_for_level(level: int) -> list[str]:
    if LANG_KEY == 'th':
        if level == 1:
            return ["‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û)", "‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏°‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û/monitor ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (ECG, SpO‚ÇÇ, BP)", "‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏ã‡∏¥‡πÄ‡∏à‡∏ô ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° BVM/‡πÉ‡∏™‡πà‡∏ó‡πà‡∏≠", "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô IV/IO 2 ‡πÄ‡∏™‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ"]
        if level == 2:
            return ["‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡πÅ‡∏î‡∏á (‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å)", "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß + monitor ‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£", "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô IV ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ï‡∏≤‡∏° protocol"]
        if level == 3:
            return ["‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô)", "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô", "‡πÉ‡∏´‡πâ IV/‡∏¢‡∏≤ ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"]
        if level == 4:
            return ["‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)", "‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£/‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"]
        return ["‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏ã‡∏ô‡∏Ç‡∏≤‡∏ß (Fast‚Äëtrack/‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å)", "‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"]
    else:
        if level == 1:
            return ["Assign to **Blue zone** (Resuscitation) immediately", "Activate resuscitation team; continuous monitoring (ECG, SpO‚ÇÇ, BP)", "High‚Äëflow O‚ÇÇ; prepare BVM/advanced airway", "2 large‚Äëbore IV/IO; fluids per protocol"]
        if level == 2:
            return ["Assign to **Red zone** (High‚Äëacuity)", "Rapid assessment; monitoring as indicated", "IV access; protocol‚Äëbased treatment"]
        if level == 3:
            return ["Assign to **Yellow zone** (Urgent)", "Timely assessment; monitoring as indicated", "IV/symptomatic care as needed"]
        if level == 4:
            return ["Assign to **Green zone** (Minor)", "Symptomatic relief; basic tests per protocol"]
        return ["Assign to **White zone** (Fast‚Äëtrack/clinic)", "Safety‚Äënet instructions and follow‚Äëup advice"]


def predict_single(input_df: pd.DataFrame) -> float:
    # Your trained sklearn pipeline expects NUM_COLS + TEXT_COLS; we provide both.
    proba = MODEL.predict_proba(input_df)
    # Binary classifier: [p(class0), p(class1)] ‚áí ICU probability is [:,1]
    return float(proba[0][1])


def write_log(single_input: dict, icu_prob: float, level: int):
    if not log_predictions:
        return
    os.makedirs("logs", exist_ok=True)
    row = {
        "timestamp": datetime.now().isoformat(timespec='seconds'),
        "session": st.session_state.get('session_id'),
        **single_input,
        "pred_icu": icu_prob,
        "triage_level": level,
    }
    path = os.path.join("logs", "predictions.csv")
    pd.DataFrame([row]).to_csv(path, mode='a', header=not os.path.exists(path), index=False)

# Stable session id
if 'session_id' not in st.session_state:
    st.session_state['session_id'] = str(uuid.uuid4())

# ---------------------------
# UI ‚Äî Header
# ---------------------------
st.title(T['title'])
st.markdown(f"<div class='hero fadein'>{T['hero']}</div>", unsafe_allow_html=True)

# ---------------------------
# UI ‚Äî Input & Results (columns collapse on mobile)
# ---------------------------
left, right = st.columns([1.05, 1])

with left:
    st.subheader(T['patient_details'])
    with st.form("patient_form", clear_on_submit=False):
        c1, c2, c3 = st.columns(3)
        with c1:
            age = st.number_input(T['age'], min_value=18, max_value=110, value=40)
            gender = st.selectbox(T['gender'], options=[T['female'] if LANG_KEY=='en' else '‡∏ç', T['male'] if LANG_KEY=='en' else '‡∏ä'], index=1)
            arrival = st.selectbox(T['arrival'], options=[T['walkin'],T['ems'],T['referral']], index=1)
            case_type = st.selectbox(T['case_type'], options=[T['trauma'],T['nontrauma']], index=1)
        with c2:
            sbp = st.number_input(T['sbp'], min_value=40, max_value=300, value=110)
            dbp = st.number_input(T['dbp'], min_value=20, max_value=200, value=70)
            temp = st.number_input(T['temp'], min_value=30.0, max_value=43.0, value=37.4, step=0.1, format="%.1f")
            pr = st.number_input(T['pr'], min_value=20, max_value=220, value=98)
        with c3:
            rr = st.number_input(T['rr'], min_value=6, max_value=80, value=22)
            o2sat = st.number_input(T['o2'], min_value=50, max_value=100, value=95)
            gcs_e = st.number_input(T['gcs_e'], min_value=1, max_value=4, value=4)
            gcs_v = st.number_input(T['gcs_v'], min_value=1, max_value=5, value=5)
            gcs_m = st.number_input(T['gcs_m'], min_value=1, max_value=6, value=6)
        cc = st.text_area(T['cc'], placeholder=T['placeholder_cc'])

        submitted = st.form_submit_button(T['predict'], use_container_width=True)

    input_df = None
    if submitted:
        # Map back to raw expected tokens for model
        gender_raw = gender if LANG_KEY=='th' else ('‡∏ç' if gender=='F' else '‡∏ä')
        arrival_raw = {'Walk-in':'Walkin','EMS':'EMS','Referral':'Referral',
                       '‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á':'Walkin','EMS':'EMS','‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠':'Referral'}[arrival]
        case_raw = {'Trauma':'T','Non-trauma':'N','‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏':'T','‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏':'N'}[case_type]

        # Build data frame with numeric/cat + 512-d text embedding
        use_vec = embed_text(cc)
        text_df = pd.DataFrame(use_vec, columns=TEXT_COLS)

        num_df = pd.DataFrame([[age, sbp, dbp, temp, pr, rr, o2sat, gcs_e, gcs_v, gcs_m, gender_raw, arrival_raw, case_raw]],
                              columns=NUM_COLS)
        input_df = pd.concat([num_df, text_df], axis=1)

with right:
    st.subheader(T['recommendation'])
    if submitted and input_df is not None:
        with st.spinner("Analyzing..." if LANG_KEY=='en' else "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
            try:
                icu_prob = predict_single(input_df)
                vitals = dict(sbp=sbp, o2sat=o2sat, rr=rr, temp=temp, gcs_e=gcs_e, gcs_v=gcs_v, gcs_m=gcs_m)
                level, css, why = triage_decision(icu_prob, vitals)
                lvl_name = LEVEL_MAP[level][0][LANG_KEY]
                zone_name, zone_area = zone_for_level(level)

                st.markdown(f"<span class='badge {css}'>"+T['triage']+f": {level} ‚Äî {lvl_name}</span>", unsafe_allow_html=True)
                st.markdown(f"<span class='badge {css}'>"+T['zone']+f": {zone_name} ‚Äî {zone_area}</span>", unsafe_allow_html=True)

                with st.container(border=True):
                    st.markdown("**"+T['actions']+"**")
                    for a in actions_for_level(level):
                        st.write("‚Ä¢ ", a)
                    st.caption((T['why']+": ") + "; ".join(why))

                st.markdown("---")
                st.markdown("**"+T['outcomes']+"**")
                with st.container(border=True):
                    label = T['icu']
                    st.metric("Probability" if LANG_KEY=='en' else '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô', f"{icu_prob*100:.1f}%")
                    st.progress(min(max(icu_prob, 0.0), 1.0))

                # Download result
                out_row = {**input_df.iloc[0].to_dict(), "pred_icu": icu_prob, "triage_level": level, "zone": zone_name}
                out_df = pd.DataFrame([out_row])
                st.download_button(
                    T['download'],
                    data=out_df.to_csv(index=False).encode('utf-8'),
                    file_name=f"triage_result_{int(time.time())}.csv",
                    mime="text/csv",
                    use_container_width=True,
                )

                if log_predictions:
                    write_log(num_df.iloc[0].to_dict() | {"cc": cc}, icu_prob, level)

            except Exception as e:
                st.error(("Prediction failed: " if LANG_KEY=='en' else "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ: ") + f"{type(e).__name__}: {e}")

# ---------------------------
# Tabs ‚Äî Tutorial, Evidence, About, Contact
# ---------------------------
TAB_TITLES = LANGS[LANG_KEY]['tabs']
with st.container():
    t1, t2, t3, t4 = st.tabs(TAB_TITLES)

    with t1:
        if LANG_KEY=='en':
            st.markdown("""
            **How to use**
            1) Fill in patient details and chief complaint at the entrance.
            2) Press **Get recommendation**.
            3) Assign the suggested **zone** (Blue/Red/Yellow/Green/White). Red‚Äëflags auto‚Äëpromote to Level 1.
            4) Follow **Suggested actions** and local protocols.
            5) Optionally, download the result or enable CSV logging in the sidebar.
            """)
        else:
            st.markdown("""
            **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**
            1) ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ ER
            2) ‡∏Å‡∏î **‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**
            3) ‡∏à‡∏±‡∏î‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤ **‡πÇ‡∏ã‡∏ô** ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô/‡πÅ‡∏î‡∏á/‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß/‡∏Ç‡∏≤‡∏ß) ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏µ‡∏û‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1 ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            4) ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° **‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ** ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
            5) ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å CSV ‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
            """)

    with t2:
        st.markdown("""
        **Model development & validation**  
        - Structured features: demographics, vital signs, GCS, arrival mode, trauma flag.  
        - Free‚Äëtext chief complaint encoded with **Multilingual Universal Sentence Encoder (USE)**.  
        - Trained gradient‚Äëboosted model with calibration; evaluated with AUROC/AUPRC and **bootstrap** stability + **calibration** checks.  
        - Intended as **front‚Äëdoor triage decision support** for EMS crews, triage nurses, and ED doctors.
        
        **Preprint**: https://sciety-labs.elifesciences.org/articles/by?article_doi=10.21203/rs.3.rs-6229836/v1  
        **Team**: Patipan Sitthiprawiat, Borwon Wittayachamnankul, Wachiranun Sirikul, Korsin Laohavisudhi ‚Äî Chiang Mai University Faculty of Medicine, **Emergency Department & Informatics**.
        """)

    with t3:
        st.markdown("""
        **Patipan Sitthiprawiat, MD**  
        Emergency Medicine, Chiang Mai University.  
        Interests: clinical AI, emergency triage, and health informatics.
        """)

    with t4:
        st.markdown("""
        **Contact / Feedback**  
        - Email: *please insert here*  
        - Issue tracker: *insert link (e.g., GitHub, Google Form)*  
        - Notes: No patient‚Äëidentifying data should be uploaded. This tool is not a substitute for clinical judgment.
        """)

# ---------------------------
# Footer / Evidence (fixed)
# ---------------------------
st.markdown("---")
st.caption(LANGS[LANG_KEY]['footer_note'])
st.caption((LANGS[LANG_KEY]['footer_evidence'] + " https://sciety-labs.elifesciences.org/articles/by?article_doi=10.21203/rs.3.rs-6229836/v1"))
st.caption(LANGS[LANG_KEY]['footer_team'])
st.caption(f"Build {APP_VERSION} ‚Ä¢ Session {st.session_state.get('session_id')}")
